name: Event Management System

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev

jobs:
  run-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        mongodb-version: ["6.0"]

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}
          mongodb-replica-set: test-rs
          mongodb-port: 27017

      - name: Install dependencies
        run: |
          cd Backend
          npm i

      - name: Run tests
        env:
          SALT_ROUND: ${{ secrets.SALT_ROUND }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ACCESS_TOKEN_EXPIRY: 1d
          REFRESH_TOKEN_EXPIRY: 15d
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          CI: true
        run: |
          cd Backend 
          npm run test

  deploy-to-render:
    runs-on: ubuntu-latest
    needs: run-tests
    if: ${{ needs.run-tests.result == 'success' }} # Only deploy if tests pass
    steps:
      - name: Trigger deployment webhook
        run: curl -X GET -d '{}' ${{ secrets.DEPLOYMENT_WEBHOOK_URL }}

  deploy-to-netlify:
    runs-on: ubuntu-latest
    needs: run-tests
    if: ${{ needs.run-tests.result == 'success' }} # Only deploy if tests pass
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd Evently
          npm install

      - name: Build
        run: |
          cd Evently
          npm run build

      - name: Deploy to Netlify
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          cd Evently
          npx netlify-cli deploy --prod --dir=./build --message "${{ steps.commit_message.outputs.message }}"

  send-slack-notification:
    runs-on: ubuntu-latest
    needs: [run-tests, deploy-to-netlify, deploy-to-render]
    if: always() # Always run this job, regardless of whether tests pass or fail
    steps:
      - name: Fetch logs
        if: ${{ always() }} # Ensure this step always runs
        id: get_logs
        run: |
          logs=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/logs")
          echo "::set-output name=logs::$logs"

      - name: Parse logs and send Slack notification
        if: ${{ always() }} # Ensure this step always runs
        run: |
          # Parse logs to extract relevant information
          # For demonstration purposes, let's assume the logs are stored in the $logs variable

          # Include the parsed logs in the Slack notification message
          if [[ ${{ job.status }} == 'success' ]]; then
            message="Workflow *Evently* tests completed successfully. \nCheck the logs for details: $logs"
          else
            message="Workflow *Evently* tests failed. \nCheck the logs for details: $logs"
          fi
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$message\"}" $SLACK_WEBHOOK_URL
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
