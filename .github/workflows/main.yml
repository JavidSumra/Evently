name: Event Management System

on:
  push: # Trigger the workflow on push events to the specified branches
    branches:
      - main
      - dev
  pull_request: # Trigger the workflow on pull requests targeting the specified branches
    branches:
      - main

jobs:
  run-unit-tests:
    runs-on: ubuntu-latest # Define the operating system for the job
    strategy:
      matrix: # Define a matrix for running tests with different configurations
        node-version: [20.x]
        mongodb-version: ["6.0"]

    steps:
      - name: Checkout code # Step to checkout the repository code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }} # Step to set up Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Start MongoDB # Step to start MongoDB service
        uses: supercharge/mongodb-github-action@1.10.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}
          mongodb-replica-set: test-rs
          mongodb-port: 27017

      - name: Install backend dependencies
        run: |
          cd Backend
          npm ci

      - name: Run backend tests
        env:
          SALT_ROUND: ${{ secrets.SALT_ROUND }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ACCESS_TOKEN_EXPIRY: 1d
          REFRESH_TOKEN_EXPIRY: 15d
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

        run: |
          cd Backend
          npm run test

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: run-unit-tests
    if: ${{ needs.run-unit-tests.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./Backend
          push: true
          tags: javidsumra/evently_1:latest

  deploy-to-render:
    runs-on: ubuntu-latest # Define the operating system for the job
    needs: [run-unit-tests, build-and-push-docker-image]
    if: ${{ needs.run-unit-tests.result == 'success' }} # Condition to run the job only if run-unit-tests job succeeds
    steps:
      - name: Trigger deployment webhook #trigger deployment webhook
        run: curl -X GET -d '{}' ${{ secrets.DEPLOYMENT_WEBHOOK_URL }}

  deploy-to-netlify:
    runs-on: ubuntu-latest
    needs: [run-unit-tests, build-and-push-docker-image]
    if: ${{ needs.run-unit-tests.result == 'success' }} # Condition to run the job only if run-unit-tests job succeeds
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install frontend dependencies # Step to install frontend dependencies
        run: |
          cd Evently
          npm ci

      - name: Build frontend # Step to build frontend
        run: |
          cd Evently
          npm run build

      - name: Get last commit message
        id: commit_message
        run: echo "::set-output name=message::$(git log --format=%B -n 1 $GITHUB_SHA)"

      - name: Deploy to Netlify
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
          cd Evently
          npx netlify-cli env:set VITE_API_ENDPOINT https://evently-backend-jiec.onrender.com/api/v1 
          npx netlify-cli deploy --prod --dir=build --message "${{ steps.commit_message.outputs.message }}"

  send-slack-notification:
    runs-on: ubuntu-latest
    needs:
      [
        run-unit-tests,
        build-and-push-docker-image,
        deploy-to-netlify,
        deploy-to-render,
      ]
    if: ${{ always() }}
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        with:
          status: ${{ job.status }}
          mention: "here"
          author_name: "GitHub Actions"
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
